apply plugin: 'com.android.application'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'
// Apply the Performance Monitoring plugin
apply plugin: 'com.google.firebase.firebase-perf'

static InetAddress getLocalAddress() throws SocketException {
    List<NetworkInterface> ifaces = Collections.list(NetworkInterface.getNetworkInterfaces())
    ifaces.sort { a, b -> (a.getName() <=> b.getName()) }
    Iterator<NetworkInterface> ifaceIterator = ifaces.iterator()

    while (ifaceIterator.hasNext()) {
        NetworkInterface iface = ifaceIterator.next()
        Enumeration<InetAddress> addresses = iface.getInetAddresses()

        while (addresses.hasMoreElements()) {
            InetAddress addr = addresses.nextElement()
            if (addr instanceof Inet4Address && !addr.isLoopbackAddress()) {
                return addr
            }
        }
    }
    return null
}

repositories {
    mavenCentral()
    google()
}

android {
    compileSdkVersion 33
    buildToolsVersion "30.0.3"
    namespace "in.juspay.mobility"

    defaultConfig {
        minSdkVersion 23
        targetSdkVersion 33
        versionCode 100
        versionName "1.2.9"
        multiDexEnabled true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    // If you are not able to generate signed APK uncomment this
    // packagingOptions {
    //     exclude 'META-INF/DEPENDENCIES'
    //     exclude 'META-INF/LICENSE'
    //     exclude 'META-INF/LICENSE.txt'
    //     exclude 'META-INF/license.txt'
    //     exclude 'META-INF/NOTICE'
    //     exclude 'META-INF/NOTICE.txt'
    //     exclude 'META-INF/notice.txt'
    //     exclude 'META-INF/ASL2.0'
    //     exclude("META-INF/*.kotlin_module")
    // }

    buildTypes {
        def host = getLocalAddress()?.getHostAddress() ?: ""
        debug {
            resValue "string", "local_ip", host
            resValue "bool", "debuggable", "true"
            applicationIdSuffix '.debug'
            minifyEnabled false
//            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.debug
            manifestPlaceholders = [
                    appIcon     : "@mipmap/ic_launcher_debug",
                    appIconRound: "@mipmap/ic_launcher_debug"
            ]
        }
        release {
            resValue "bool", "debuggable", "false"
            minifyEnabled true
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.debug
            manifestPlaceholders = [
                    appIcon     : "@mipmap/ic_launcher",
                    appIconRound: "@mipmap/ic_launcher_round"
            ]
        }
    }
    Properties properties = new Properties()
    if (rootProject.file("local.properties").exists()) {
        properties.load(rootProject.file("local.properties").newDataInputStream())
    }
    flavorDimensions "app", "mode"
    variantFilter rootProject.ext.becknVariantFilter
    productFlavors {
        prod {
            buildConfigField "String", "flavor", "\"prod\""
            buildConfigField "String", "MERCHANT_ID_USER", properties.getProperty("MERCHANT_ID_USER", "")
            buildConfigField "String", "MERCHANT_ID_DRIVER", properties.getProperty("MERCHANT_ID_DRIVER", "")
            buildConfigField "String", "CONFIG_URL_USER", properties.getProperty("CONFIG_URL_USER", "")
            buildConfigField "String", "CONFIG_URL_DRIVER", properties.getProperty("CONFIG_URL_DRIVER", "")
            manifestPlaceholders = [isUsesCleartextTraffic: "false", mapsApiKey : properties.getProperty("MAPS_API_KEY", "")]
            resValue "string", "facebook_app_id", properties.getProperty("FACEBOOK_APP_ID","")
            resValue "string", "facebook_client_token", properties.getProperty("FACEBOOK_CLIENT_TOKEN","")
            resValue "string", "fb_login_protocol_scheme", properties.getProperty("FB_LOGIN_PROTOCOL_SCHEMA","")
            resValue "string", "clevertap_account_id", properties.getProperty("CLEVERTAP_ACCOUNT_ID","")
            resValue "string", "clevertap_token", properties.getProperty("CLEVERTAP_TOKEN","")
            resValue "string", "clevertap_region", properties.getProperty("CLEVERTAP_REGION","")
            dimension "mode"
        }
        dev {
            buildConfigField "String", "flavor", "\"dev\""
            buildConfigField "String", "MERCHANT_ID_USER", properties.getProperty("MERCHANT_ID_USER", "")
            buildConfigField "String", "MERCHANT_ID_DRIVER", properties.getProperty("MERCHANT_ID_DRIVER", "")
            buildConfigField "String", "CONFIG_URL_USER", properties.getProperty("CONFIG_URL_USER", "")
            buildConfigField "String", "CONFIG_URL_DRIVER", properties.getProperty("CONFIG_URL_DRIVER", "")
            manifestPlaceholders = [isUsesCleartextTraffic: "true", mapsApiKey : properties.getProperty("MAPS_API_KEY", "")]
            resValue "string", "facebook_app_id", properties.getProperty("FACEBOOK_APP_ID","")
            resValue "string", "facebook_client_token", properties.getProperty("FACEBOOK_CLIENT_TOKEN","")
            resValue "string", "fb_login_protocol_scheme", properties.getProperty("FB_LOGIN_PROTOCOL_SCHEMA","")
            resValue "string", "clevertap_account_id", properties.getProperty("CLEVERTAP_ACCOUNT_ID","")
            resValue "string", "clevertap_token", properties.getProperty("CLEVERTAP_TOKEN","")
            resValue "string", "clevertap_region", properties.getProperty("CLEVERTAP_REGION","")
            dimension "mode"
        }
        nyUser {
            applicationId "in.juspay.nammayatri"
            buildConfigField "String", "MERCHANT_TYPE", "\"USER\""
            buildConfigField "String", "MERCHANT", "\"KA\""
            dimension "app"
        }
        nyDriver {
            applicationId "in.juspay.nammayatripartner"
            buildConfigField "String", "MERCHANT_TYPE", "\"DRIVER\""
            buildConfigField "String", "MERCHANT", "\"KA\""
            dimension "app"
        }
        ysUser {
            applicationId "in.juspay.jatrisaathi"
            buildConfigField "String", "MERCHANT_TYPE", "\"USER\""
            buildConfigField "String", "MERCHANT", "\"WB\""
            dimension "app"
        }
        ysDriver {
            applicationId "in.juspay.jatrisaathidriver"
            buildConfigField "String", "MERCHANT_TYPE", "\"DRIVER\""
            buildConfigField "String", "MERCHANT", "\"WB\""
            dimension "app"
        }
        yatriUser {
            applicationId "net.openkochi.yatri"
            buildConfigField "String", "MERCHANT_TYPE", "\"USER\""
            buildConfigField "String", "MERCHANT", "\"KL\""
            dimension "app"
        }
        yatriDriver {
            applicationId "net.openkochi.yatripartner"
            buildConfigField "String", "MERCHANT_TYPE", "\"DRIVER\""
            buildConfigField "String", "MERCHANT", "\"KL\""
            dimension "app"
        }
        passCulturePartner {
            applicationId "net.openkochi.yatripartner"
            buildConfigField "String", "MERCHANT_TYPE", "\"DRIVER\""
            buildConfigField "String", "MERCHANT", "\"FR\""
            dimension "app"
        }
    }
    lintOptions {
        abortOnError false
    }
    sourceSets {
        nyUser.setRoot('src/user/nammaYatri')
        nyDriver.setRoot('src/driver/nammaYatriPartner')
        ysUser.setRoot('src/user/jatriSaathi')
        ysDriver.setRoot('src/driver/jatriSaathiDriver')
        yatriUser.setRoot('src/user/yatri')
        yatriDriver.setRoot('src/driver/yatriPartner')
        passCulturePartner.setRoot('src/driver/passCulturePartner')
        nyUser.res.srcDir('src/user/common/res')
        ysUser.res.srcDir('src/user/common/res')
        yatriUser.res.srcDir('src/user/common/res')
        nyDriver.res.srcDir('src/driver/common/res')
        ysDriver.res.srcDir('src/driver/common/res')
        yatriDriver.res.srcDir('src/driver/common/res')
        passCulturePartner.res.srcDir('src/driver/common/res')
    }
    sourceSets {
        dev.res.srcDir 'src/dev/res'

//        Use when required to create hash for otp message
//        This is to be used only when signature changes.
//        This is never to be used in production
//        prod.java.srcDir 'src/generateHashes/java'
        // dev.java.srcDir 'src/generateHashes/java'

    }
    compileOptions {
        targetCompatibility = 1.8
        sourceCompatibility = 1.8
    }
    variantFilter { variant ->
        // To check for a certain build type, use variant.buildType.name == "<buildType>"
        def names = variant.flavors*.name
        def build = variant.buildType.name
        if (names.contains("dev") && build.contains("release")) {
            // Gradle ignores any variants that satisfy the conditions above.
            setIgnore(true)
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar', '*.aar'])
    implementation 'in.juspay:hypersdk:2.1.13-nammayatri.33'
    implementation project(path: ':mobility-app')
    compileOnly project(path: ':mobility-common')
    implementation platform('com.google.firebase:firebase-bom:31.1.1')
    nyDriverImplementation project(path: ':mobility-driver')
    passCulturePartnerImplementation project(path: ':mobility-driver')
    ysDriverImplementation project(path: ':mobility-driver')
    yatriDriverImplementation project(path: ':mobility-driver')
    nyUserImplementation project(path: ':mobility-customer')
    ysUserImplementation project(path: ':mobility-customer')
    yatriUserImplementation project(path: ':mobility-customer')
    implementation 'com.google.firebase:firebase-dynamic-links'
    implementation 'com.google.firebase:firebase-analytics'

    implementation 'com.google.firebase:firebase-crashlytics:18.3.7'
    implementation 'com.google.firebase:firebase-messaging'
    implementation 'com.google.firebase:firebase-installations:17.1.3'
    implementation 'com.google.firebase:firebase-perf'
    implementation 'com.google.firebase:firebase-inappmessaging-display'
    implementation 'com.google.android.libraries.places:places:3.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'com.google.android.material:material:1.6.0'
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'com.google.maps.android:android-maps-utils:2.4.0'
    implementation 'androidx.work:work-runtime:2.8.1'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.2.0-alpha01'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
    implementation 'com.google.android.gms:play-services-maps:18.1.0'
    implementation 'com.google.android.gms:play-services-location:21.0.1'
    implementation 'com.google.android.libraries.places:places:3.1.0'
    implementation 'com.google.android.gms:play-services-auth:20.5.0'
    implementation 'com.google.android.gms:play-services-auth-api-phone:18.0.1'
    implementation "androidx.coordinatorlayout:coordinatorlayout:1.2.0"
    implementation "androidx.swiperefreshlayout:swiperefreshlayout:1.1.0"
    implementation 'com.google.android.play:app-update:2.0.1'
    implementation 'com.airbnb.android:lottie:5.2.0'
    implementation 'com.google.firebase:firebase-firestore'
    implementation 'com.google.firebase:firebase-auth'
    implementation 'com.google.android.play:review:2.0.1'
    implementation 'com.pierfrancescosoffritti.androidyoutubeplayer:core:11.1.0'
    implementation 'com.facebook.android:facebook-android-sdk:14.0.0'
    api 'com.theartofdev.edmodo:android-image-cropper:2.8.0'
    implementation 'com.github.bumptech.glide:glide:4.15.1'
    implementation 'androidx.core:core:1.4.0'
    implementation 'com.clevertap.android:clevertap-android-sdk:5.0.0'
    implementation 'com.android.installreferrer:installreferrer:2.2'
    debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.11'
}

def tmpSource = "/tmp/juspay"
def jsSource = "${projectDir}/src"
def assetSource = "${projectDir}/src"
def shouldMinify = false

tasks.create(name: 'minifyJsFiles') {
    def jsFiles = []
    def minJsFiles = []

    File tmpFolder = new File(tmpSource)
    if (tmpFolder.exists()) {
        tmpFolder.deleteDir()
    }

    File folder = new File(jsSource)
    def addFilesToQueue
    addFilesToQueue = { dir, suffix ->
        File tempFolder = new File(tmpSource + suffix)
        if (!tempFolder.exists()) {
            tempFolder.mkdirs()
        }

        if (dir.isDirectory()) {
            for (String file : dir.list()) {
                File curr = new File(dir.getAbsolutePath() + "/" + file)
                if (!curr.isDirectory() && curr.getName().endsWith(".js")) {
                    jsFiles.add(dir.getAbsolutePath() + "/" + file)

                    String fileName = file.substring(0, file.lastIndexOf("."))
                    String extension = file.substring(file.lastIndexOf(".") + 1, file.length())

                    File tmp = new File(tmpSource + suffix)
                    if (!tmp.exists()) {
                        tmp.mkdirs()
                    }

                    minJsFiles.add(tmpSource + suffix + fileName + ".min." + extension)
                } else if (curr.isDirectory()) {
                    if (curr.getName() == "js") {
                        addFilesToQueue(curr, suffix + "assets" + "/")
                    } else {
                        addFilesToQueue(curr, suffix + curr.getName() + "/")
                    }
                }
            }
        }
    }
    addFilesToQueue(folder, "/")

    inputs.files jsFiles
    outputs.files minJsFiles
    doLast {
        jsFiles.eachWithIndex { filePath, index ->
            String inPath = filePath
            String outPath = minJsFiles[index]

            println "Processing " + inPath + " " + outPath
            File outDir = new File(outPath.substring(0, outPath.lastIndexOf("/")))
            if (!outDir.exists()) {
                outDir.mkdirs();
            }
            browserify(inPath, outPath, !filePath.toString().contains("bundle") && shouldMinify)
        }
    }
}

//Byte processing

void browserify(String inPath, String outPath, boolean shouldMinify) {
    println "Processing " + inPath + " " + outPath
    File outDir = new File(outPath.substring(0, outPath.lastIndexOf("/")));
    if (!outDir.exists()) {
        outDir.mkdirs();
    }

    def result = new StringBuffer()

    Process code = (shouldMinify) ? ('browserify -p /usr/local/lib/node_modules/tinyify ' + inPath + ' -o ' + outPath).execute()
            : ('cp ' + inPath + ' ' + outPath).execute()

    code.waitForProcessOutput(result, result)
    if (code.exitValue() != 0) {
        String error = "Error Occurred while processing " + inPath + "\n"
        result.append(error)
        throw new Error(result.toString())
    }
    println "Processed and packaged at " + result
}